---
- name: load lustre
  command: modprobe lustre
  changed_when: False

- name: Configure lustre to use ssk for authentication (only) for client to mdt/ost (only)
  command: "lctl conf_param {{ lustre.fs_name }}.srpc.flavor.default.{{ item }}={{ lustre.ssk_flavor }}"
  loop:
    - cli2ost
    - cli2mdt
  # TODO: changed_when e.g. "lctl get_param mgs.*.live.{{ lustre.fs_name }} | grep flavor" => ['test_fs1.srpc.flavor.default.cli2ost=skn', 'test_fs1.srpc.flavor.default.cli2mdt=skn']
  
- name: Create lustre config directory
  file:
    path: /etc/lustre
    state: directory # TODO: secure this? keys are created as read-only for root

- name: create server keys
  command:
    cmd: "lgss_sk -t server -f {{ lustre.fs_name }} -e {{ lustre.key_duration }} --nodemap {{ item | replace('-', '_') }} -w /etc/lustre/{{ item | replace('-', '_') }}.server.key"
    creates: "/etc/lustre/{{ item | replace('-', '_') }}.server.key"
  loop: "{{ groups['lustre_client'] }}"
  when: "lustre.ssk_flavor != 'null'"

- name: copy server keys to client keys (on server)
  command:
    cmd: "cp /etc/lustre/{{ item | replace('-', '_') }}.server.key /etc/lustre/{{ item | replace('-', '_') }}.client.key"
    creates: "/etc/lustre/{{ item | replace('-', '_') }}.client.key"
  loop: "{{ groups['lustre_client'] }}"
  when: "lustre.ssk_flavor != 'null'"

- name: check if client keys have already been modified
  shell: "lgss_sk -r /etc/lustre/{{ item | replace('-', '_') }}.client.key | grep -c client"
  ignore_errors: yes
  register: client_keyfile_types
  loop: "{{ groups['lustre_client'] }}"
  changed_when: False
  when: "lustre.ssk_flavor != 'null'"

- name: create client keys (on server)
  # This is really slow
  command: 
    cmd: "lgss_sk -t client -f {{ lustre.fs_name }} -e {{ lustre.key_duration }} --nodemap admin -m /etc/lustre/{{ item.item | replace('-', '_') }}.client.key"
  when: "'stdout' in item and item.stdout == '1'" # "in" test is False if above check was skipped (because ssk_flavor == 'null')
  changed_when: "item.stdout == '0'"
  loop: "{{ client_keyfile_types.results }}" # is effectively over groups['lustre_client'] again
  loop_control:
    label: "{{ item.item }}"

- name: load server keys
  # Needed because we haven't/don't mount the mdt/ost using the skpath option, which would load all the keys anyway
  command: "lgss_sk -l /etc/lustre/{{ item | replace('-', '_') }}.server.key"
  loop: "{{ groups['lustre_client'] }}"
  when: "lustre.ssk_flavor != 'null'"
  # TODO: changed_when

- name: fetch client keys from server to control host
  # can't use synchronise from server-> client or vice versa as neither way ssh works
  fetch:
    src: "/etc/lustre/{{ item | replace('-', '_') }}.client.key"
    dest: "/var/tmp/"
    flat: yes
  loop: "{{ groups['lustre_client'] }}"
  when: "lustre.ssk_flavor != 'null'"

- name: ensure client config directory exists
  file:
    path: /etc/lustre
    state: directory
  delegate_to: "{{ item }}"
  loop: "{{ groups['lustre_client'] }}"
  # NB: we do this even if we're not using ssk as then clients can always mount with skpath=/etc/lustre, it just won't load any keys if it's empty.

- name: write client keys to clients
  copy:
    src: "/var/tmp/{{ item | replace('-', '_') }}.client.key"
    dest: "/etc/lustre/{{ item | replace('-', '_') }}.client.key"
    mode: u=r,go=
  delegate_to: "{{ item }}"
  loop: "{{ groups['lustre_client'] }}"
  # TODO: consider using slurp to read the keys to control host memory, then using shell: "base64 -d < {{ content }} > /etc/lustre/<keyfile>"
  #       similar to suggestion here : https://stackoverflow.com/a/31039053/916373
  # NB: you can't use copy with content parameter to write it, see https://github.com/ansible/ansible/issues/20150

- name: configure key checking daemon
  lineinfile:
    path: "/etc/sysconfig/lsvcgss"
    regexp: "^LSVCGSSDARGS="
    line: "LSVCGSSDARGS='-vv -s -m -o'" # verbose, shared-key mode, MDS, OST
  when: "lustre.ssk_flavor != 'null'"
  # TODO: changed_when

- name: start key checking daemon
  command: service lsvcgss start
  when: "lustre.ssk_flavor != 'null'"
  # TODO: changed_when: doesn't actually matter if run more than once
  # note to start in foreground use: lsvcgssd -f -vv -s -m -o

- name: activate nodemaps
  shell: "lctl get_param nodemap.* ; lctl nodemap_activate 1; lctl get_param nodemap.* "
  register: nodemap_activate
  failed_when: "'nodemap.active=1' not in nodemap_activate.stdout_lines" # for some reason get_param's rc is 5
  changed_when: "nodemap_activate.stdout_lines == ['nodemap.active=0','nodemap.active=1']"
  # TODO: this is dead hacky!
    
- name: add client nodemaps
  command: "lctl nodemap_add {{ item | replace('-', '_') }}" # TODO: undocumented restrictions in nodeset names: so far know "-" and "." aren't allowed.
  loop: "{{ groups['lustre_client'] }}"
  register: nodemap_add
  failed_when: nodemap_add.rc != 0 and ('existing nodemap name' not in nodemap_add.stderr)
  changed_when: nodemap_add.rc == 0
  # TODO: remove any existing nodemaps which aren't client ones

- name: list all nodemaps
  shell: "lctl nodemap_info"
  register: nodemaps
  changed_when: false

- name: remove any non-client nodemaps
  shell: "lctl nodemap_del {{ item | replace('nodemap.', '') }}"
  loop: "{{ nodemaps.stdout_lines }}"
  when: "item | replace('nodemap.', '') not in groups['lustre_client'] | map('replace', '-', '_') | list | union(['default'])"

- name: add clients to nodemaps
  command: "lctl nodemap_add_range --name {{ item | replace('-', '_') }} --range {{ hostvars[item]['ansible_host'] }}@{{ hostvars[item]['lnet_eth0_net_type'] }}" # client NID
  register: nodemap_add_range
  loop: "{{ groups['lustre_client'] }}"
  failed_when: "nodemap_add_range.rc != 0 and ('errno: 12' not in nodemap_add_range.stderr)"
  changed_when: nodemap_add_range.rc == 0
  # TODO: remove any incorrect ranges

- name: configure client nodemap filesets
  command: "lctl nodemap_set_fileset --name {{ item | replace('-', '_') }} --fileset '{{ hostvars[item].lustre.fileset }}'" # NB can't check this is a valid path here!
  loop: "{{ groups['lustre_client'] }}"
  # TODO: need to make permanent too - see docs
  # TODO: check using lctl get_param nodemap.proj3.ranges?
  # TODO: changed_when

- name: configure client nodemaps group squash
  # lctl takes gid but we defined group name in group_vars. If name is False, use (lustre default gid) 99 else lookup gid from projects var.
  command: "lctl nodemap_modify --name {{ item | replace('-', '_') }} --property squash_gid --value {{ 99 if (hostvars[item].lustre.squash_group == False) else projects[hostvars[item].lustre.squash_group].base }}"
  loop: "{{ groups['lustre_client'] }}"
  # TODO: if this is set from <name> to False at the moment it won't reset to default 99..
  # TODO: need to make permanent too - see docs
  # can run these multiple times with no (direct) way to tell if it's changed
  # TODO: changed_when

- name: configure client nodemaps user squash
  # comments as for group squash above
  command: "lctl nodemap_modify --name {{ item | replace('-', '_') }} --property squash_uid --value {{ 99 if (hostvars[item].lustre.squash_user == False) else projects[hostvars[item].lustre.squash_user].base }}"
  loop: "{{ groups['lustre_client'] }}"
  # TODO: changed_when

- name: configure client nodemaps trusted property
  command: "lctl nodemap_modify --name {{ item | replace('-', '_') }} --property trusted --value {{ hostvars[item].lustre.trusted|int }}"
  loop: "{{ groups['lustre_client'] }}"
  # TODO: changed_when

- name: configure client nodemap admin property
  command: "lctl nodemap_modify --name {{ item | replace('-', '_') }} --property admin --value {{ hostvars[item].lustre.admin|int }}"
  loop: "{{ groups['lustre_client'] }}"
  # TODO: changed_when
  