- name: Configure projects on MGS
  hosts: lustre_server[0] # TODO: MGS group?
  gather_facts: false
  become: true
  tasks:

  - name: load lustre
    command: modprobe lustre
    changed_when: False

  - name: Configure lustre to use ssk for authentication (only) for client to mdt/ost (only)
    command: "lctl conf_param {{ lustre.fs_name }}.srpc.flavor.default.{{ item }}={{ lustre.ssk_flavor }}"
    loop:
      - cli2ost
      - cli2mdt
    # TODO: changed_when e.g. "lctl get_param mgs.*.live.{{ lustre.fs_name }} | grep flavor" => ['test_fs1.srpc.flavor.default.cli2ost=skn', 'test_fs1.srpc.flavor.default.cli2mdt=skn']
    
  - name: ensure client config directory exists
    # NB: we do this even if we're not using ssk as then clients can always mount with skpath=/etc/lustre, it just won't load any keys if it's empty.
    file:
      path: /etc/lustre
      state: directory
      mode: 0600
    delegate_to: "{{ item }}"
    loop: "{{ groups['lustre_client'] }}"

  - name: setup ssk shared keys on server
    import_tasks: ssk.yml
    when: "lustre.ssk_flavor != 'null'"

  - name: activate nodemaps
    shell: "lctl get_param nodemap.* ; lctl nodemap_activate 1; lctl get_param nodemap.* "
    register: nodemap_activate
    failed_when: "'nodemap.active=1' not in nodemap_activate.stdout_lines" # for some reason get_param's rc is 5
    changed_when: "nodemap_activate.stdout_lines == ['nodemap.active=0','nodemap.active=1']"
    # TODO: this changed_when is a bit hacky
      
  - name: add client nodemaps
    command: "lctl nodemap_add {{ item | replace('-', '_') }}" # TODO: undocumented restrictions in nodeset names: testing shows at least "-" and "." aren't allowed.
    loop: "{{ groups['lustre_client'] }}"
    register: nodemap_add
    failed_when: nodemap_add.rc != 0 and ('existing nodemap name' not in nodemap_add.stderr)
    changed_when: nodemap_add.rc == 0

  - name: list all nodemaps
    shell: "lctl nodemap_info"
    register: nodemaps
    changed_when: false

  - name: remove any non-client nodemaps
    shell: "lctl nodemap_del {{ item | replace('nodemap.', '') }}"
    loop: "{{ nodemaps.stdout_lines }}"
    when: "item | replace('nodemap.', '') not in groups['lustre_client'] | map('replace', '-', '_') | list | union(['default'])"

  - name: add clients to nodemaps
    command: "lctl nodemap_add_range --name {{ item | replace('-', '_') }} --range {{ hostvars[item]['ansible_host'] }}@{{ hostvars[item]['lnet_eth0_net_type'] }}" # client NID
    register: nodemap_add_range
    loop: "{{ groups['lustre_client'] }}"
    failed_when: "nodemap_add_range.rc != 0 and ('errno: 12' not in nodemap_add_range.stderr)"
    changed_when: nodemap_add_range.rc == 0
    # TODO: remove any incorrect ranges

  - name: configure client nodemap filesets
    command: "lctl nodemap_set_fileset --name {{ item | replace('-', '_') }} --fileset '{{ hostvars[item].lustre.fileset }}'" # NB can't check this is a valid path here!
    loop: "{{ groups['lustre_client'] }}"
    # TODO: need to make permanent too - see docs
    # TODO: check using lctl get_param nodemap.proj3.ranges?
    # TODO: changed_when

  - name: configure client nodemaps group squash
    # lctl takes gid but we defined group name in group_vars. If name is False, use (lustre default gid) 99 else lookup gid from projects var.
    command: "lctl nodemap_modify --name {{ item | replace('-', '_') }} --property squash_gid --value {{ hostvars[item].lustre.squash_gid }}"
    loop: "{{ groups['lustre_client'] }}"
    # TODO: if this is set from <name> to False at the moment it won't reset to default 99..
    # TODO: need to make permanent too - see docs
    # can run these multiple times with no (direct) way to tell if it's changed
    # TODO: changed_when

  - name: configure client nodemaps user squash
    # comments as for group squash above
    command: "lctl nodemap_modify --name {{ item | replace('-', '_') }} --property squash_uid --value {{ hostvars[item].lustre.squash_uid }}"
    loop: "{{ groups['lustre_client'] }}"
    # TODO: changed_when

  - name: configure client nodemaps trusted property
    command: "lctl nodemap_modify --name {{ item | replace('-', '_') }} --property trusted --value {{ hostvars[item].lustre.trusted|int }}"
    loop: "{{ groups['lustre_client'] }}"
    # TODO: changed_when

  - name: configure client nodemap admin property
    command: "lctl nodemap_modify --name {{ item | replace('-', '_') }} --property admin --value {{ hostvars[item].lustre.admin|int }}"
    loop: "{{ groups['lustre_client'] }}"
    # TODO: changed_when

  - name: configure client nodemap deny_unknown property
    command: "lctl nodemap_modify --name {{ item | replace('-', '_') }} --property deny_unknown --value {{ hostvars[item].lustre.deny_unknown|int }}"
    loop: "{{ groups['lustre_client'] }}"

  - name: configure client nodemap mappings
    include_tasks: idmap.yml
    loop: "{{ groups['lustre_client'] }}"
    loop_control:
      loop_var: loop_host

- name: Deploy ssk client keys
  hosts: lustre_client
  gather_facts: false
  become: true
  tasks:
    - block:
      # name: Create lustre config directory # done in projects.yml    

      - name: slurp key from server
        shell:
          cmd: "ssh {{ ansible_ssh_common_args }} {{ ansible_user }}@{{ hostvars['lustre-storage']['ansible_host'] }} -- sudo cat /etc/lustre/{{ inventory_hostname | replace('-', '_') }}.client.key | base64"
        register: client_ssk
        delegate_to: localhost
        become: false
      
      - name: write key to client
        shell:
          cmd: "echo '{{ client_ssk.stdout }}' | base64 -d > /etc/lustre/{{ inventory_hostname | replace('-', '_') }}.client.key"
        # TODO: changed_when - is this even possible??
      
      - name: secure key
        file:
          path: "/etc/lustre/{{ inventory_hostname | replace('-', '_') }}.client.key"
          mode: 0600
      
      when: "lustre.ssk_flavor != 'null'"