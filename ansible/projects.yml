---
- name: Setup projects
  hosts: lustre_server[0] # TODO: MGS group? but some of this is server and some is "admin" client ...
  become: true
  gather_facts: false
  tasks:

  - name: load lustre
    command: modprobe lustre
    changed_when: False

  - name: Configure lustre to use ssk for authentication (only) for client to mdt/ost (only)
    command: "lctl conf_param {{ fs_name }}.srpc.flavor.default.{{ item }}=skn"
    loop:
      - cli2ost
      - cli2mdt
    # TODO: use "lctl get_param mgs.*.live.{{ fs_name }}", poss. w/ grep, to check before?
    # TODO: NB these are ADDITITATIVE so if changed might need to run e.g. lctl conf_param -d test_fs1.srpc.flavor.default
    # Can use lctl get_param mgs.*.live.test_fs1 to check what's active

  - name: Create lustre config directory
    file:
      path: /etc/lustre
      state: directory # TODO: secure this? keys are created as read-only for root

  - name: create server keys
    command: "lgss_sk -t server -f {{ fs_name }} -e {{ key_duration }} --nodemap {{ item | replace('-', '_') }} -w /etc/lustre/{{ item | replace('-', '_') }}.server.key"
    loop: "{{ groups['lustre_client'] }}"
    register: result
    failed_when: "result.rc != 0 and 'File exists' not in result.stderr"

  - name: load server keys
    # Needed because we  haven't/don't mount the mdt/ost using the skpath option, which would load all the keys anyway
    command: "lgss_sk -l /etc/lustre/{{ item | replace('-', '_') }}.server.key"
    loop: "{{ groups['lustre_client'] }}"

  - name: copy keys to control host
    # workaround for synchronize not working due to ssh setup (?)
    fetch:
      src: "/etc/lustre/{{ item | replace('-', '_') }}.server.key"
      dest: "/tmp/etc/lustre/{{ item | replace('-', '_') }}.server.key"
      flat: yes
    loop: "{{ groups['lustre_client'] }}"
  
  - name: configure key checking daemon
    lineinfile:
      path: "/etc/sysconfig/lsvcgss"
      regexp: "^LSVCGSSDARGS="
      line: "LSVCGSSDARGS='-vv -s -m -o'" # verbose, shared-key mode, MDS, OST

  - name: create admin nodemap
    command: "lctl nodemap_add admin"
    register: admin_nodemap_add
    failed_when: admin_nodemap_add.rc != 0 and ('existing nodemap name' not in admin_nodemap_add.stderr)
    changed_when: admin_nodemap_add.rc == 0

  - name: add client1 to admin nodemap
    command: "lctl nodemap_add_range --name admin --range {{ hostvars['lustre-client1']['ansible_host'] }}@{{ lnet_eth0_net_type }}" # TODO: remove lustre-client1
    register: admin_nodemap_add_range
    failed_when: "admin_nodemap_add_range.rc != 0 and ('errno: 12' not in admin_nodemap_add_range.stderr)"
    changed_when: admin_nodemap_add_range.rc == 0

  # COMMENTED OUT PURELY CAUSE I'M RUNNING IN FOREGROUND WITH
  # lsvcgssd -f -vv -s -m -o
  #- name: start key checking daemon
  #  command: service lsvcgss start
  #  # TODO: changed_when: doesn't actually matter if run more than once

  - name: make admin nodemap trusted
    command: "lctl nodemap_modify --name admin --property trusted --value 1"
    # TODO: changed_when
    
  - name: make admin nodemap admin
    command: "lctl nodemap_modify --name admin --property admin --value 1"
    # TODO: changed_when

  - name: activate nodemaps
    shell: "lctl get_param nodemap.* ; lctl nodemap_activate 1; lctl get_param nodemap.* "
    register: nodemap_activate
    failed_when: "'nodemap.active=1' not in nodemap_activate.stdout_lines" # for some reason get_param's rc is 5
    changed_when: "nodemap_activate.stdout_lines == ['nodemap.active=0','nodemap.active=1']"
    # TODO: this is dead hacky!

  - name: create lustre filesystem mountpoint on MGS
    file:
      path: "/mnt/lustre/{{ fs_name }}"
      state: directory
      # NB: this seems to fail with a "File exists" error if the fs is mounted :-(
    register: mkdir_lustre_mount
    #debugger: on_failed
    failed_when: mkdir_lustre_mount.failed and 'File exists' not in mkdir_lustre_mount.msg
    # think there's an ansible bug here?
      
  # - name: add client nodemaps
  #   command: "lctl nodemap_add {{ item | replace('-', '_') }}" # TODO: undocumented restrictions in nodeset names: so far know "-" and "." aren't allowed.
  #   loop: "{{ groups['lustre_client'] }}"
  #   register: nodemap_add
  #   failed_when: nodemap_add.rc != 0 and ('existing nodemap name' not in nodemap_add.stderr)
  #   changed_when: nodemap_add.rc == 0

  # - name: add clients to client nodemaps
  #   command: "lctl nodemap_add_range --name {{ item | replace('-', '_') }} --range {{ hostvars[item]['ansible_host'] }}@{{ hostvars[item]['lnet_eth0_net_type'] }}" # client NID
  #   register: nodemap_add_range
  #   loop: "{{ groups['lustre_client'] }}"
  #   failed_when: "nodemap_add_range.rc != 0 and ('errno: 12' not in nodemap_add_range.stderr)"
  #   changed_when: nodemap_add_range.rc == 0

  # #- name: configure client nodemaps with filesets
  # #  command: "lctl nodemap_set_fileset --name {{ item | replace('-', '_') }} --fileset '/{{ hostvars[item].mount.name }}'" # NB can't check this is a valid path!
  # #  loop: "{{ groups['lustre_client'] }}"
  # #  # TODO: need to make permanent too - see docs
  # #  # TODO: check using lctl get_param nodemap.proj3.ranges?

  # - name: configure client nodemaps to squash groups
  #   # TODO: has to be done with the nodemap inactive?
  #   command: "lctl nodemap_modify --name {{ item | replace('-', '_') }} --property squash_gid --value {{ projects[hostvars[item].mount.name].base }}"
  #   loop: "{{ groups['lustre_client'] }}"
  #   when: hostvars[item].mount.squashed

  # - name: configure client nodemaps to squash users
  #   # TODO: has to be done with the nodemap inactive?
  #   # clientname ->     -> projectname
  #   command: "lctl nodemap_modify --name {{ item | replace('-', '_') }} --property squash_uid --value {{ projects[hostvars[item].mount.name].base }}"
  #   loop: "{{ groups['lustre_client'] }}"
  #   when: hostvars[item].mount.squashed
  #   # note can run this multiple times with no (direct) way to tell if it's changed
  
  # - name: configure client nodemaps not to translate uid/gids
  #   command: "lctl nodemap_modify --name {{ item | replace('-', '_') }} --property trusted --value 1"
  #   loop: "{{ groups['lustre_client'] }}"
  #   when: hostvars[item].mount.trusted

